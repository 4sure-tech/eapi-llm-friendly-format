openapi: 3.0.0
paths:
  /api/lob/{lob_id}/schema/draft:
    post:
      operationId: SchemaController_createSchema
      summary: Create and register Schema on a public registry
      parameters:
        - name: lob_id
          required: true
          in: path
          description: LOB id
          schema:
            type: string
          x-gitbook-description-html: <p>LOB id</p>
      requestBody:
        required: true
        description: Save schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchemaRequest'
        x-gitbook-description-html: <p>Save schema</p>
      responses:
        '201':
          description: API successfully created new records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDraftSchemaResponse'
          x-gitbook-description-html: <p>API successfully created new records</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - schema
      security:
        - api-key: []
  /api/lob/{lob_id}/schema/register:
    post:
      operationId: SchemaController_registerSchema
      summary: Register Schema on a public registry
      parameters:
        - name: lob_id
          required: true
          in: path
          description: LOB id
          schema:
            type: string
          x-gitbook-description-html: <p>LOB id</p>
      requestBody:
        required: true
        description: Register schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        x-gitbook-description-html: <p>Register schema</p>
      responses:
        '201':
          description: API successfully created new records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSchemaResponse'
          x-gitbook-description-html: <p>API successfully created new records</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - schema
      security:
        - api-key: []
  /api/lob/{lob_id}/schemas:
    get:
      operationId: SchemaController_getSchemas
      summary: Retrieve all Schemas
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema: {}
        - name: limit
          required: false
          in: query
          example: 10
          schema: {}
        - name: search
          required: false
          in: query
          schema: {}
        - name: state
          required: false
          in: query
          schema:
            enum:
              - draft
              - available
            type: string
        - name: lob_id
          required: true
          in: path
          description: LOB id
          schema: {}
          x-gitbook-description-html: <p>LOB id</p>
      responses:
        '200':
          description: Schema list fetched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
          x-gitbook-description-html: <p>Schema list fetched successfully.</p>
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>bad request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: api not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>api not found</p>
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: <p>internal server error</p>
      tags:
        - schema
      security:
        - api-key: []
  /api/lob/{lob_id}/schema/{schema_id}:
    get:
      operationId: SchemaController_getSchemaById
      summary: Retrieve A Schema
      parameters:
        - name: lob_id
          required: true
          in: path
          description: LOB id
          schema:
            type: string
          x-gitbook-description-html: <p>LOB id</p>
        - name: schema_id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: API request processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          x-gitbook-description-html: <p>API request processed successfully</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - schema
      security:
        - api-key: []
  /api/lob/{lob_id}/schema/store:
    post:
      operationId: SchemaController_storeSchema
      summary: Import An External Schema
      parameters:
        - name: lob_id
          required: true
          in: path
          description: LOB id
          schema:
            type: string
          x-gitbook-description-html: <p>LOB id</p>
      requestBody:
        required: true
        description: Save schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSchemaRequest'
        x-gitbook-description-html: <p>Save schema</p>
      responses:
        '201':
          description: API successfully store new records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreSchemaResponse'
          x-gitbook-description-html: <p>API successfully store new records</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - schema
      security:
        - api-key: []
  /api/lob/{lob_id}/cred-def:
    post:
      operationId: CredDefController_createCredDef
      summary: Create Credential definition on a public registry
      parameters:
        - name: lob_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        description: Create credential definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredDefRequest'
        x-gitbook-description-html: <p>Create credential definition</p>
      responses:
        '201':
          description: API successfully created new records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCredDefResponse'
          x-gitbook-description-html: <p>API successfully created new records</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - credential-definition
      security:
        - api-key: []
  /api/lob/{lob_id}/cred-defs:
    get:
      operationId: CredDefController_getCredDefs
      summary: Retrieve all Credential definitions
      parameters:
        - name: lob_id
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          example: 1
          schema: {}
        - name: limit
          required: false
          in: query
          example: 10
          schema: {}
        - name: search
          required: false
          in: query
          schema: {}
      responses:
        '200':
          description: API request processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredDefResponse'
          x-gitbook-description-html: <p>API request processed successfully</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - credential-definition
      security:
        - api-key: []
  /api/lob/{lob_id}/cred-defs/{credential_id}:
    get:
      operationId: CredDefController_getCredDefById
      summary: Retrieve A Credential Definition
      parameters:
        - name: lob_id
          required: true
          in: path
          schema:
            type: string
        - name: credential_id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: API request processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleCredDefResponse'
          x-gitbook-description-html: <p>API request processed successfully</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - credential-definition
      security:
        - api-key: []
  /api/lob/{lob_id}/cred-def/store:
    post:
      operationId: CredDefController_storeCredDef
      summary: Import An External Credential Definition
      parameters:
        - name: lob_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        description: Store credential definition in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCredDefRequest'
        x-gitbook-description-html: <p>Store credential definition in database</p>
      responses:
        '201':
          description: Credential definition stored successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredCredDefResponse'
          x-gitbook-description-html: <p>Credential definition stored successfully.</p>
        '400':
          description: A required parameter was missing in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          x-gitbook-description-html: <p>A required parameter was missing in the request</p>
        '401':
          description: Invalid API Key included in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
          x-gitbook-description-html: <p>Invalid API Key included in the request</p>
        '404':
          description: URL cannot be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
          x-gitbook-description-html: <p>URL cannot be found</p>
        '500':
          description: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
          x-gitbook-description-html: >-
            <p>The server encountered an unexpected condition that prevented it
            from fulfilling the request</p>
      tags:
        - credential-definition
      security:
        - api-key: []
  /health:
    get:
      operationId: HealthController_selfCheck
      summary: this api check application running health
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
          x-gitbook-description-html: <p>The Health Check is successful</p>
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
          x-gitbook-description-html: <p>The Health Check is not successful</p>
      tags:
        - health
info:
  title: Orbit Credential Management API
  description: >-
    Credential Management API is a SAAS service that Issuer entity uses to
    create cred-def and schemas.
  version: '1.0'
  contact: {}
  x-gitbook-description-document:
    object: document
    data:
      schemaVersion: 8
    nodes:
      - object: block
        type: paragraph
        isVoid: false
        data: {}
        nodes:
          - object: text
            leaves:
              - object: leaf
                text: >-
                  Credential Management API is a SAAS service that Issuer entity
                  uses to create cred-def and schemas.
                marks: []
  x-gitbook-description-html: >-
    <p>Credential Management API is a SAAS service that Issuer entity uses to
    create cred-def and schemas.</p>
tags: []
servers: []
components:
  securitySchemes:
    api-key:
      type: apiKey
      in: header
      name: api-key
  schemas:
    BadRequestResponse:
      type: object
      properties:
        message:
          type: string
          example: A required parameter was missing in the request
        error:
          type: string
          example: Bad Request
        statusCode:
          type: number
          example: 400
      required:
        - message
        - error
        - statusCode
    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid API Key included in the request
        error:
          type: string
          example: UnauthorizedException
        statusCode:
          type: number
          example: 401
      required:
        - message
        - error
        - statusCode
    NotFoundErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: URL cannot be found
        error:
          type: string
          example: Not Found
        statusCode:
          type: number
          example: 404
      required:
        - message
        - error
        - statusCode
    InternalServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: >-
            The server encountered an unexpected condition that prevented it
            from fulfilling the request
        error:
          type: string
          example: InternalServerErrorException
        statusCode:
          type: number
          example: 500
      required:
        - message
        - error
        - statusCode
    SchemaInfoRequest:
      type: object
      properties:
        schemaName:
          type: string
          example: Driving_license
          description: The name of the schema.
          x-gitbook-description-html: <p>The name of the schema.</p>
        schemaVersion:
          type: string
          example: '1.0'
          pattern: ^[0-9.]+$
          description: The version of the schema.
          x-gitbook-description-html: <p>The version of the schema.</p>
        governanceUrl:
          type: string
          example: https://mining.ca.governance
          description: The governance URL for the schema.
          x-gitbook-description-html: <p>The governance URL for the schema.</p>
        credentialFormat:
          type: string
          enum:
            - ANONCRED
            - JSON_LD
            - vc+sd-jwt
          example: ANONCRED
          description: The format of the credential for the schema.
          x-gitbook-description-html: <p>The format of the credential for the schema.</p>
      required:
        - schemaName
        - schemaVersion
        - credentialFormat
    CreateSchemaRequest:
      type: object
      properties:
        schemaInfo:
          $ref: '#/components/schemas/SchemaInfoRequest'
        attributes:
          description: Attributes structure varies by credentialFormat.
          oneOf:
            - example:
                first_name: text
                last_name: text
                dob_dateint: text
              description: In case of an Anoncred schema
              x-gitbook-description-html: <p>In case of an Anoncred schema</p>
            - example:
                ConformityAttestation:
                  name: text
                  assessorLevel: text
                  assessmentLevel: text
                  description: text
                  issuedToParty: Party
                  x-gitbook-description-html: <p>text</p>
                Party:
                  name: text
                  registeredId: text
                  idScheme: IdentifierScheme
                  description: text
                  registrationCountry: text
                  organisationWebsite: text
                  industryCategory: text
                  otherIdentifier: text
                  x-gitbook-description-html: <p>text</p>
                IdentifierScheme:
                  - name: text
                    issuingAuthority: text
                    trustmark: BinaryFile
                BinaryFile:
                  fileName: text
                  fileType: text
              description: In case of a JSON_LD schema
              x-gitbook-description-html: <p>In case of a JSON_LD schema</p>
          x-gitbook-description-html: <p>Attributes structure varies by credentialFormat.</p>
        isDraft:
          type: boolean
          example: true
          description: Indicates if the schema is a draft or not.
          x-gitbook-description-html: <p>Indicates if the schema is a draft or not.</p>
      required:
        - schemaInfo
        - isDraft
    SchemaDraftResponse:
      type: object
      properties:
        schemaDraftId:
          type: number
          description: The ID of the schema.
          example: 1
          x-gitbook-description-html: <p>The ID of the schema.</p>
        schemaState:
          type: string
          enum:
            - draft
            - available
          example: draft
          description: The state of the schema.
          x-gitbook-description-html: <p>The state of the schema.</p>
        schemaLedgerId:
          type: string
          description: Schema identifier
          example: Ud5n8k3RnY8EkVHRfUyRri:2:Driving_license:1.0
          x-gitbook-description-html: <p>Schema identifier</p>
      required:
        - schemaDraftId
        - schemaState
    CreateDraftSchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Schema created successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/SchemaDraftResponse'
      required:
        - success
        - message
        - data
    RegisterSchemaRequest:
      type: object
      properties:
        schemaDraftId:
          type: number
          example: 1
          description: The draft ID of the schema to be registered.
          x-gitbook-description-html: <p>The draft ID of the schema to be registered.</p>
      required:
        - schemaDraftId
    SchemaResponseDetails:
      type: object
      properties:
        schemaId:
          type: number
          description: The ID of the schema.
          example: 1
          x-gitbook-description-html: <p>The ID of the schema.</p>
        schemaState:
          type: string
          enum:
            - draft
            - available
          example: available
          description: The state of the schema.
          x-gitbook-description-html: <p>The state of the schema.</p>
        schemaLedgerId:
          type: string
          description: Schema identifier
          example: Ud5n8k3RnY8EkVHRfUyRri:2:Driving_license:1.0
          x-gitbook-description-html: <p>Schema identifier</p>
      required:
        - schemaId
        - schemaState
    CreateSchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Schema created successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/SchemaResponseDetails'
      required:
        - success
        - message
        - data
    SchemaEntity:
      type: object
      properties:
        schemaId:
          type: number
          example: 1
        schemaName:
          type: string
          example: Driving_license
        schemaVersion:
          type: string
          example: '1.0'
        attributes:
          type: object
          example:
            first_name: text
            last_name: text
            dob_dateint: text
        schemaLedgerId:
          type: string
          example: Ud5n8k3RnY8EkVHRfUyRri:2:Driving_license:1.0
        issuerDid:
          type: object
          example: Ud5n8k3RnY8EkVHRfUyRri
        governanceURL:
          type: string
          example: null
        credentialFormat:
          type: string
          example: ANONCRED
        state:
          type: string
          example: draft
        endorsementState:
          type: string
          example: null
        transactionId:
          type: string
          example: null
      required:
        - schemaName
        - schemaVersion
        - credentialFormat
        - state
    PaginationMeta:
      type: object
      properties:
        totalItems:
          type: number
          example: 100
          description: The total number of items available in the dataset.
          x-gitbook-description-html: <p>The total number of items available in the dataset.</p>
        itemCount:
          type: number
          example: 10
          description: The number of items on the current page.
          x-gitbook-description-html: <p>The number of items on the current page.</p>
        itemsPerPage:
          type: number
          example: 10
          description: The number of items displayed per page.
          x-gitbook-description-html: <p>The number of items displayed per page.</p>
        totalPages:
          type: number
          example: 10
          description: >-
            The total number of pages available based on the dataset size and
            items per page.
          x-gitbook-description-html: >-
            <p>The total number of pages available based on the dataset size and
            items per page.</p>
        currentPage:
          type: number
          example: 1
          description: The current page number being viewed.
          x-gitbook-description-html: <p>The current page number being viewed.</p>
      required:
        - totalItems
        - itemCount
        - itemsPerPage
        - totalPages
        - currentPage
    GetSchemaRecord:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SchemaEntity'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - items
        - meta
    SchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Schema fetched successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/GetSchemaRecord'
      required:
        - success
        - message
        - data
    GetSchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Schema retrieved successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/SchemaEntity'
      required:
        - success
        - message
        - data
    StoreSchemaInfoRequest:
      type: object
      properties:
        schemaLedgerId:
          type: string
          example: Ud5n8k3RnY8EkVHRfUyRri:2:Driving_license:1.0
          description: The ledgerId of the schema.
          x-gitbook-description-html: <p>The ledgerId of the schema.</p>
        governanceUrl:
          type: string
          example: https://mining.ca.governance
          description: The governance URL for the schema.
          x-gitbook-description-html: <p>The governance URL for the schema.</p>
        credentialFormat:
          type: string
          enum:
            - ANONCRED
            - JSON_LD
            - vc+sd-jwt
          example: ANONCRED
          description: The format of the credential for the schema.
          x-gitbook-description-html: <p>The format of the credential for the schema.</p>
      required:
        - schemaLedgerId
        - credentialFormat
    StoreSchemaRequest:
      type: object
      properties:
        schemaInfo:
          $ref: '#/components/schemas/StoreSchemaInfoRequest'
      required:
        - schemaInfo
    StoreSchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Schema stored successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/SchemaResponseDetails'
      required:
        - success
        - message
        - data
    CreateCredDefRequest:
      type: object
      properties:
        schemaId:
          type: number
          example: 1
          description: >-
            The identifier of the schema associated with this credential
            definition.
          x-gitbook-description-html: >-
            <p>The identifier of the schema associated with this credential
            definition.</p>
        tag:
          type: string
          example: Driving_License
          description: A tag used to categorize the credential definition.
          x-gitbook-description-html: <p>A tag used to categorize the credential definition.</p>
        supportRevocation:
          type: boolean
          example: false
          description: >-
            Indicates whether revocation is supported for this credential
            definition.
          x-gitbook-description-html: >-
            <p>Indicates whether revocation is supported for this credential
            definition.</p>
        revocationRegistrySize:
          type: number
          example: 100
          description: The size of the revocation registry (if revocation is supported).
          x-gitbook-description-html: >-
            <p>The size of the revocation registry (if revocation is
            supported).</p>
        description:
          type: string
          description: Driving license issued by Northern Block
          example: Driving license issued by Northern Block
          x-gitbook-description-html: <p>Driving license issued by Northern Block</p>
        addCredDef:
          type: boolean
          example: false
          description: >-
            To create credential governance, set this flag to true. If set to
            true, the credential definition will be added to the governance
            system.
          x-gitbook-description-html: >-
            <p>To create credential governance, set this flag to true. If set to
            true, the credential definition will be added to the governance
            system.</p>
      required:
        - schemaId
        - tag
        - supportRevocation
        - description
    CreateCredDef:
      type: object
      properties:
        credentialDefinitionId:
          type: string
          example: Ud5n8k3RnY8EkVHRfUyRri:3:CL:896218:Driving_License
          description: The unique identifier for the created credential definition.
          x-gitbook-description-html: <p>The unique identifier for the created credential definition.</p>
        credentialId:
          type: number
          example: 1
          description: The identifier for the credential associated with this definition.
          x-gitbook-description-html: >-
            <p>The identifier for the credential associated with this
            definition.</p>
      required:
        - credentialDefinitionId
        - credentialId
    CreateCredDefResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: credential definition created successfully.
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/CreateCredDef'
      required:
        - success
        - message
        - data
    GetSingleCredDef:
      type: object
      properties:
        schemaId:
          type: number
          example: 1
          description: >-
            The identifier of the schema associated with this credential
            definition.
          x-gitbook-description-html: >-
            <p>The identifier of the schema associated with this credential
            definition.</p>
        tag:
          type: string
          example: Driving_License
          description: A tag used to categorize the credential definition.
          x-gitbook-description-html: <p>A tag used to categorize the credential definition.</p>
        supportRevocation:
          type: boolean
          example: false
          description: >-
            Indicates whether revocation is supported for this credential
            definition.
          x-gitbook-description-html: >-
            <p>Indicates whether revocation is supported for this credential
            definition.</p>
        revocationRegistrySize:
          type: number
          example: 100
          description: The size of the revocation registry (if revocation is supported).
          x-gitbook-description-html: >-
            <p>The size of the revocation registry (if revocation is
            supported).</p>
        description:
          type: string
          description: Description of the credential definition
          example: Driving license issued by Northern Block
          x-gitbook-description-html: <p>Description of the credential definition</p>
        credentialDefinitionId:
          type: string
          description: Unique identifier for the credential definition
          example: Ud5n8k3RnY8EkVHRfUyRri:3:CL:896218:Driving_License
          x-gitbook-description-html: <p>Unique identifier for the credential definition</p>
        credentialId:
          type: number
          example: 1
          description: The identifier for the credential associated with this definition.
          x-gitbook-description-html: >-
            <p>The identifier for the credential associated with this
            definition.</p>
        credIssuerId:
          type: string
          example: did:sov:Ud5n8k3RnY8EkVHRfUyRri
          description: The identifier for the credential associated with this definition.
          x-gitbook-description-html: >-
            <p>The identifier for the credential associated with this
            definition.</p>
      required:
        - schemaId
        - tag
        - supportRevocation
        - description
        - credentialDefinitionId
        - credentialId
        - credIssuerId
    GetCredDefRecord:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetSingleCredDef'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - items
        - meta
    CredDefResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Credential definition fetched successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/GetCredDefRecord'
      required:
        - success
        - message
        - data
    GetSingleCredDefResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Credential definition fetched successfully!
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/GetSingleCredDef'
      required:
        - success
        - message
        - data
    StoreCredDefRequest:
      type: object
      properties:
        schemaId:
          type: number
          example: 1
          description: >-
            The identifier of the schema associated with this credential
            definition.
          x-gitbook-description-html: >-
            <p>The identifier of the schema associated with this credential
            definition.</p>
        credentialDefinitionId:
          type: string
          example: Ud5n8k3RnY8EkVHRfUyRri:3:CL:896218:Driving_License
          description: The identifier of associated this credential definition.
          x-gitbook-description-html: <p>The identifier of associated this credential definition.</p>
        description:
          type: string
          example: Driving license issued by Northern Block
          description: Description of the credential definition
          x-gitbook-description-html: <p>Description of the credential definition</p>
        addCredDef:
          type: boolean
          example: false
          description: >-
            To create credential governance, set this flag to true. If set to
            true, the credential definition will be added to the governance
            system.
          x-gitbook-description-html: >-
            <p>To create credential governance, set this flag to true. If set to
            true, the credential definition will be added to the governance
            system.</p>
      required:
        - schemaId
        - credentialDefinitionId
        - description
    StoredCredDef:
      type: object
      properties:
        credentialDefinitionId:
          type: string
          example: Ud5n8k3RnY8EkVHRfUyRri:3:CL:896218:Driving_License
          description: The unique identifier for the created credential definition.
          x-gitbook-description-html: <p>The unique identifier for the created credential definition.</p>
        credentialId:
          type: number
          example: 1
          description: The identifier for the credential associated with this definition.
          x-gitbook-description-html: >-
            <p>The identifier for the credential associated with this
            definition.</p>
      required:
        - credentialDefinitionId
        - credentialId
    StoredCredDefResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Should be “true” in the response body for series 200 response
          x-gitbook-description-html: <p>Should be “true” in the response body for series 200 response</p>
        message:
          type: string
          example: Credential definition stored successfully.
          description: >-
            Standardized description of the response body for series 200, 300,
            400 and 500 response
          x-gitbook-description-html: >-
            <p>Standardized description of the response body for series 200,
            300, 400 and 500 response</p>
        data:
          $ref: '#/components/schemas/StoredCredDef'
      required:
        - success
        - message
        - data
